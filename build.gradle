plugins {
    id 'kotlin-multiplatform' version '1.3.0-rc-146'
    id 'com.moowork.node' version '1.2.0'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
}

apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm32, 'iosArm32')
        fromPreset(presets.iosArm64, 'iosArm64')
        fromPreset(presets.macosX64, 'macosX64')
        fromPreset(presets.linuxX64, 'linuxX64')
        fromPreset(presets.mingwX64, 'mingwX64')
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js') {
            compilations.main {
                compileKotlinJs.kotlinOptions {
                    languageVersion = "1.3"
                    sourceMap = true
                    metaInfo = true
                    moduleKind = "umd"
                }
                compileTestKotlinJs.kotlinOptions {
                    languageVersion = "1.3"
                    moduleKind = "commonjs"
                }
            }
        }
    }
    sourceSets {
        nativeCommonMain
        nativeCommonTest
        nativePosixMain
        mingwX64Main {
            dependsOn nativeCommonMain
        }
        mingwX64Main {
            dependsOn nativeCommonTest
        }
        configure([iosX64Main, iosArm32Main, iosArm64Main, macosX64Main, linuxX64Main]) {
            dependsOn nativeCommonMain
            dependsOn nativePosixMain
        }
        configure([iosX64Test, iosArm32Test, iosArm64Test, macosX64Test, linuxX64Test]) {
            dependsOn nativeCommonTest
        }
    }
}

dependencies {
    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

    jsMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js"

    jvmMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    jvmTestImplementation "org.jetbrains.kotlin:kotlin-test"
    jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

// Javascript test configuration
node {
    version = '8.11.4'
    download = true
    nodeModulesDir = file("$buildDir/yarn")
}

def jsCompilations = kotlin.targets.js.compilations
task addYarnDeps(type: YarnTask) {
    doFirst {
        mkdir "$buildDir/yarn"
    }
    args = ["add", "qunit@2.6.2"]
}

task populateNodeModules {
    doLast {
        copy {
            from "$buildDir/yarn/node_modules"
            from jsCompilations.main.output.first()
            jsCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into "$buildDir/node_modules"
        }
    }
}

task runQunit(type: NodeTask, dependsOn: [jsCompilations.test.compileKotlinTaskName, addYarnDeps, populateNodeModules]) {
    script = file("$buildDir/node_modules/qunit/bin/qunit")
    args = [relativePath("${jsCompilations.test.output.first()}/klock_test.js")]
}

jsTest.dependsOn runQunit

// Fix for https://github.com/srs/gradle-node-plugin/issues/301
repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}
